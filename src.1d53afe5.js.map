{"version":3,"sources":["task-2.js","task-3.js","index.js"],"names":["users","name","active","toggleUserState","allUsers","userName","promise","Promise","resolve","setTimeout","updatedUsers","map","user","logger","console","table","then","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","reject","id","logSuccess","log","logError","warn","amount","catch","ms","time"],"mappings":";;;AAAA,MAAMA,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,KASxBC,OARS,IAAIC,QAAQC,IACxBC,WAAW,KACDC,MAAAA,EAAeN,EAASO,IAAIC,GAC9BA,EAAKX,OAASI,EAAW,IAAKO,EAAMV,QAASU,EAAKV,QAAWU,GAEjEJ,EAAQE,IACT,QAKLG,EAASH,GAAgBI,QAAQC,MAAML,GAE7CP,EAAgBH,EAAO,SAASgB,KAAKH,GACrCV,EAAgBH,EAAO,OAAOgB,KAAKH;;ACtBnC,MAAMI,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkBC,IACdC,MAAAA,EAAQR,EAA0B,IAAK,KACtC,OAAA,IAAIV,QAAQ,CAACC,EAASkB,KACzBjB,WAAW,KACYW,KAAKE,SAAW,GAG/Bd,EAAQ,CAAEmB,GAAIH,EAAYG,GAAIF,MAAAA,IAE9BC,EAAOF,EAAYG,OAG5BF,IAGDG,EAAa,EAAGD,GAAAA,EAAIF,MAAAA,MACtBX,QAAQe,mBAAmBF,kBAAmBF,QAG5CK,EAAWH,IACbb,QAAQiB,qCAAqCJ,+BAGjDJ,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC7BhB,KAAKY,GACLK,MAAMH,GAEXP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC7BhB,KAAKY,GACLK,MAAMH,GAEXP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,KAC7BhB,KAAKY,GACLK,MAAMH,GAEXP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC7BhB,KAAKY,GACLK,MAAMH;;AC1BX,aAXA,SAASL,EAAMS,GACJ,OAAA,IAAI3B,QAAQ,CAACC,EAASkB,KACzBjB,WAAW,KACPD,KAAW0B,KACXR,EAAO,cACLQ,OATd,QAAA,oBACA,QAAA,YACA,QAAA,YAUA,MAAMrB,EAASsB,GAAQrB,QAAQe,sBAAsBM,OACrDV,EAAM,KAAMT,KAAKH,GACjBY,EAAM,KAAMT,KAAKH,GACjBY,EAAM,MAAMT,KAAKH","file":"src.1d53afe5.js","sourceRoot":"../src","sourcesContent":["const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    const promise = new Promise(resolve => {\n        setTimeout(() => {\n            const updatedUsers = allUsers.map(user =>\n                user.name === userName ? { ...user, active: !user.active } : user,\n            )\n            resolve(updatedUsers);\n        }, 3000);\n    })\n    return promise;\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, delay });\n            } else {\n                reject(transaction.id);\n            }\n        })\n    }, delay);\n};\n\nconst logSuccess = ({ id, delay }) => {\n    console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './sass/main.scss';\nimport './task-2';\nimport './task-3';\n\nfunction delay(ms) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(`${ms}`);\n            reject('Uppsss');\n        }, `${ms}`);\n    })\n}\nconst logger = time => console.log(`Resolved after ${time}ms`);\ndelay(2000).then(logger);\ndelay(1000).then(logger);\ndelay(1500).then(logger);"]}